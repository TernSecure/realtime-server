name: Deploy to server

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_DEPLOY_PRIVATE_KEY }}

      - name: Add SERVER to known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy code to Server
        env:
          SERVER_HOST: ${{ secrets.SERVER_HOST }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          SERVICE_NAME: ${{ secrets.SERVICE_NAME }}
        run: |
          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            # First, change ownership of existing files
            sudo chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} ${{ secrets.DEPLOY_PATH }}
            
            # Stop the service
            sudo systemctl stop ${{ secrets.SERVICE_NAME }}

            # Backup existing code
            timestamp=$(date +%Y%m%d_%H%M%S)
            if [ -d "${{ secrets.DEPLOY_PATH }}"]; then
              sudo mv ${{ secrets.DEPLOY_PATH }} "${{ secrets.DEPLOY_PATH }}_backup_${timestamp}"
            fi

            # Create and set permissions for new directory
            sudo mkdir -p ${{ secrets.DEPLOY_PATH }}
            sudo chown ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} ${{ secrets.DEPLOY_PATH }}
          '

          # Copy new code to Server
          scp -r ./* ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/

          ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} '
            cd ${{ secrets.DEPLOY_PATH }}

            # Load NVM
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

            # Install Node if not present
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js..."
              nvm install 18  # or your preferred version
              nvm use 18
            fi

            # Verify Node and npm are available
            echo "Node version: $(node -v)"
            echo "NPM version: $(npm -v)"

            echo "Installing dependencies..."
            if ! npm install; then
              echo "Failed to install dependencies"
              exit 1
            fi

            echo "Building application..."
            if ! npm run build; then
              echo "Failed to build application"
              exit 1
            fi

            echo "Build completed successfully"

            # Set correct permissions
            sudo chown -R ${{ secrets.SERVER_USER }}:${{ secrets.SERVER_USER }} ${{ secrets.DEPLOY_PATH }}
            sudo chmod -R 755 ${{ secrets.DEPLOY_PATH }}

            # Restart the service
            echo "Restarting service..."
            sudo systemctl daemon-reload
            sudo systemctl enable ${{ secrets.SERVICE_NAME }}
            sudo systemctl restart ${{ secrets.SERVICE_NAME }}

            # Check service status and exit if failed
            if ! sudo systemctl is-active --quiet ${{ secrets.SERVICE_NAME }}; then
              echo "Service failed to start. Status:"
              sudo systemctl status ${{ secrets.SERVICE_NAME }}
              exit 1
            fi

            echo "Service status:"
            sudo systemctl status ${{ secrets.SERVICE_NAME }}
          '